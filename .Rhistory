library(Hmisc)
traindata=read.csv(file="traindata.csv")
summary(traindata)
describe(traindata)
sort(table(CONTRACT_FEE))
sort(table(traindata$CONTRACT_FEE))
crs <- new.env()
crv <- new.env()
crv$seed <- 1234
# Build the training/validate/test datasets.
nobs <- nrow(traindata)
set.seed(1234)
smp_size <- floor(0.7 * nobs)
smp_size <- floor(0.8 * nobs)
train_ind <- sample(seq_len(nobs), size = smp_size)
crs$input <- c("REGION","CONTRACT_FEE","AGE_RANGE", "CREDIT_APPROVAL", "CONTACT_METHOD",
"RATE_PLAN","TOT_OPEN_AMT","TOT_INVOICE_AMT")
crs$target  <- "CHURN"
train=crs$dataset[crs$train, c(crs$input, crs$target)]
crs$dataset = traindata
train=crs$dataset[crs$train, c(crs$input, crs$target)]
test <-crs$dataset[crs$validate, c(crs$input, crs$target)]
View(train)
library(Hmisc)
traindata=read.csv(file="traindata.csv")
summary(traindata)
describe(traindata)
crs <- new.env()
crs$seed <- 1234
crs$dataset = traindata
set.seed(crs$seed)
crs$nobs <- nrow(crs$dataset)
crs$sample <- crs$train <- sample(nrow(crs$dataset), .8*crs$nobs)
crs$validate <- sample(setdiff(seq_len(nrow(crs$dataset)), crs$train), 0.2*crs$nobs)
crs$input <- c("REGION","CONTRACT_FEE","AGE_RANGE", "CREDIT_APPROVAL", "CONTACT_METHOD",
"RATE_PLAN","TOT_OPEN_AMT","TOT_INVOICE_AMT")
crs$target  <- "CHURN"
train=crs$dataset[crs$train, c(crs$input, crs$target)]
test <-crs$dataset[crs$validate, c(crs$input, crs$target)]
train=crs$dataset[crs$train, c(crs$input, crs$target)]
test =crs$dataset[crs$validate, c(crs$input, crs$target)]
fit<-rpart(CHURN~., data=train, method="anova",
control=rpart.control(minsplit=50, cp=0.01))
library(rpart)
fit<-rpart(CHURN~., data=train, method="anova",
control=rpart.control(minsplit=50, cp=0.01))
printcp(fit)
plotcp(fit)
summary(fit)
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
summary(pfit)
pred <- as.vector(ifelse(predict(fit, newdata=test) > 0.5, "1","0"))
confusionMatrix(pred, test$CHURN)
library(party)
library(caret)
library(pROC)
library(ROCR)
library(randomForest)
pred <- as.vector(ifelse(predict(fit, newdata=test) > 0.5, "1","0"))
confusionMatrix(pred, test$CHURN)
pred <- as.vector(ifelse(predict(pfit, newdata=test) > 0.5, "1","0"))
confusionMatrix(pred, test$CHURN)
fit<-rpart(CHURN~., data=train, method="anova",
control=rpart.control(minsplit=50, cp=0.01))
pred <- as.vector(ifelse(predict(fit, newdata=test) > 0.5, "1","0"))
confusionMatrix(pred, test$CHURN)
pfit<- prune(fit, cp= fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
pred <- as.vector(ifelse(predict(pfit, newdata=test) > 0.5, "1","0"))
confusionMatrix(pred, test$CHURN)
library(FSelector)
fit <- randomForest(as.factor(CHURN)~., data=train, importance=TRUE, ntree=100,OOB=TRUE,classwt = weights)
weights = information.gain(Churn~.,data=testdata)
weights = information.gain(Churn~.,data=test)
weights = information.gain(CHURN~.,data=test)
fit <- randomForest(as.factor(CHURN)~., data=train, importance=TRUE, ntree=100,OOB=TRUE,classwt = weights)
weights = information.gain(CHURN~.,data=train)
fit <- randomForest(as.factor(CHURN)~., data=train, importance=TRUE, ntree=100,OOB=TRUE,classwt = weights)
fit <- randomForest(as.factor(CHURN)~., data=train, importance=TRUE, ntree=100,OOB=TRUE)
fit$terms
varImpPlot(fit)
pred <- predict(fit, test)
confusionMatrix(pred, test$CHURN)
varImpPlot(fit)
library(randomForest)
varImpPlot(fit)
confusionMatrix(pred, test$CHURN)
library(Hmisc)
library(rpart)
library(party)
library(caret)
library(pROC)
library(ROCR)
library(randomForest)
library(FSelector)
pred <- as.vector(ifelse(predict(fit, newdata=test) > 0.5, "1","0"))
confusionMatrix(pred, test$CHURN)
fit<-rpart(CHURN~., data=train, method="anova",
control=rpart.control(minsplit=50, cp=0.01))
pred <- as.vector(ifelse(predict(fit, newdata=test) > 0.5, "1","0"))
confusionMatrix(pred, test$CHURN)
fit <- randomForest(as.factor(CHURN)~., data=train, importance=TRUE, ntree=100,OOB=TRUE)
pred <- predict(fit, test)
confusionMatrix(pred, test$CHURN)
fit <- randomForest(as.factor(CHURN)~., data=traindata, importance=TRUE, ntree=100,OOB=TRUE)
library(Hmisc)
library(rpart)
library(party)
library(caret)
library(pROC)
library(ROCR)
library(randomForest)
library(FSelector)
library(corrgram)
fit2 <- randomForest(as.factor(CHURN)~., data=traindata, importance=TRUE, ntree=100,OOB=TRUE)
library("rattle", lib.loc="~/R/win-library/3.1")
rattle()
